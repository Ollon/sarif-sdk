{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0-beta.4",
  "runs": [
    {
      "tool": {
        "name": "BinSkim",
        "fullName": "BinSkim 1.3.2.0-beta",
        "version": "1.3.2.0",
        "semanticVersion": "1.3.2",
        "language": "en-US",
        "properties": {
          "Comments": "A security and correctness analyzer for portable executable and MSIL formats.",
          "CompanyName": "Microsoft",
          "ProductName": "BinSkim Portable Executable Analyzer",
          "SarifLoggerVersion": "1.5.20.0"
        }
      },
      "results": [
        {
          "ruleId": "MSG1001",
          "level": "note",
          "formattedRuleMessage": {
            "formatId": "AnalyzingTarget",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll",
              "BA2008",
              "EnableControlFlowGuard",
              "image was compiled with a toolset version (12.0) that is not sufficiently recent (14.0 or newer) to provide relevant settings."
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll",
              "BA2015",
              "EnableHighEntropyVirtualAddresses",
              "image is not a 64-bit binary"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll",
              "BA2001",
              "LoadImageAboveFourGigabyteAddress",
              "image is not a 64-bit binary"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2010",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2012",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll",
              "BA2022",
              "SignSecurely",
              "image is not signed "
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "MixedMode_x86_VS2013_MissingPdb.dll"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
              }
            }
          ]
        }
      ],
      "configurationNotifications": [
        {
          "id": "ExceptionLoadingPdb",
          "ruleId": "BA2006",
          "analysisTarget": {
            "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
          },
          "message": "'Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'BuildWithSecureTools' because its PDB could not be loaded.\nE_PDB_NOT_FOUND (File not found)",
          "level": "error",
          "exception": {
            "kind": "PdbParseException",
            "message": "E_PDB_NOT_FOUND (File not found)",
            "stack": {
              "frames": [
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 111,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 43,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb..ctor(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinSkim.Sdk/BinaryAnalyzerContext.cs",
                  "line": 89,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.IL.Sdk.BinaryAnalyzerContext.get_Pdb()"
                }
              ]
            },
            "innerExceptions": [
              {
                "kind": "COMException",
                "message": "Exception from HRESULT: 0x806D0005",
                "stack": {
                  "frames": [
                    {
                      "fullyQualifiedLogicalName": "Dia2Lib.IDiaDataSource.loadDataForExe(String executable, String searchPath, Object pCallback)"
                    },
                    {
                      "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                      "line": 104,
                      "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                    }
                  ]
                },
                "innerExceptions": []
              }
            ]
          }
        },
        {
          "id": "ExceptionLoadingPdb",
          "ruleId": "BA2014",
          "analysisTarget": {
            "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
          },
          "message": "'Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'DoNotDisableStackProtectionForFunctions' because its PDB could not be loaded.\nE_PDB_NOT_FOUND (File not found)",
          "level": "error",
          "exception": {
            "kind": "PdbParseException",
            "message": "E_PDB_NOT_FOUND (File not found)",
            "stack": {
              "frames": [
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 111,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 43,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb..ctor(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinSkim.Sdk/BinaryAnalyzerContext.cs",
                  "line": 89,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.IL.Sdk.BinaryAnalyzerContext.get_Pdb()"
                }
              ]
            },
            "innerExceptions": [
              {
                "kind": "COMException",
                "message": "Exception from HRESULT: 0x806D0005",
                "stack": {
                  "frames": [
                    {
                      "fullyQualifiedLogicalName": "Dia2Lib.IDiaDataSource.loadDataForExe(String executable, String searchPath, Object pCallback)"
                    },
                    {
                      "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                      "line": 104,
                      "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                    }
                  ]
                },
                "innerExceptions": []
              }
            ]
          }
        },
        {
          "id": "ExceptionLoadingPdb",
          "ruleId": "BA2002",
          "analysisTarget": {
            "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
          },
          "message": "'Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'DoNotIncorporateVulnerableDependencies' because its PDB could not be loaded.\nE_PDB_NOT_FOUND (File not found)",
          "level": "error",
          "exception": {
            "kind": "PdbParseException",
            "message": "E_PDB_NOT_FOUND (File not found)",
            "stack": {
              "frames": [
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 111,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 43,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb..ctor(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinSkim.Sdk/BinaryAnalyzerContext.cs",
                  "line": 89,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.IL.Sdk.BinaryAnalyzerContext.get_Pdb()"
                }
              ]
            },
            "innerExceptions": [
              {
                "kind": "COMException",
                "message": "Exception from HRESULT: 0x806D0005",
                "stack": {
                  "frames": [
                    {
                      "fullyQualifiedLogicalName": "Dia2Lib.IDiaDataSource.loadDataForExe(String executable, String searchPath, Object pCallback)"
                    },
                    {
                      "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                      "line": 104,
                      "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                    }
                  ]
                },
                "innerExceptions": []
              }
            ]
          }
        },
        {
          "id": "ExceptionLoadingPdb",
          "ruleId": "BA2007",
          "analysisTarget": {
            "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
          },
          "message": "'Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableCriticalCompilerWarnings' because its PDB could not be loaded.\nE_PDB_NOT_FOUND (File not found)",
          "level": "error",
          "exception": {
            "kind": "PdbParseException",
            "message": "E_PDB_NOT_FOUND (File not found)",
            "stack": {
              "frames": [
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 111,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 43,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb..ctor(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinSkim.Sdk/BinaryAnalyzerContext.cs",
                  "line": 89,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.IL.Sdk.BinaryAnalyzerContext.get_Pdb()"
                }
              ]
            },
            "innerExceptions": [
              {
                "kind": "COMException",
                "message": "Exception from HRESULT: 0x806D0005",
                "stack": {
                  "frames": [
                    {
                      "fullyQualifiedLogicalName": "Dia2Lib.IDiaDataSource.loadDataForExe(String executable, String searchPath, Object pCallback)"
                    },
                    {
                      "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                      "line": 104,
                      "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                    }
                  ]
                },
                "innerExceptions": []
              }
            ]
          }
        },
        {
          "id": "ExceptionLoadingPdb",
          "ruleId": "BA2011",
          "analysisTarget": {
            "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
          },
          "message": "'Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'EnableStackProtection' because its PDB could not be loaded.\nE_PDB_NOT_FOUND (File not found)",
          "level": "error",
          "exception": {
            "kind": "PdbParseException",
            "message": "E_PDB_NOT_FOUND (File not found)",
            "stack": {
              "frames": [
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 111,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 43,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb..ctor(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinSkim.Sdk/BinaryAnalyzerContext.cs",
                  "line": 89,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.IL.Sdk.BinaryAnalyzerContext.get_Pdb()"
                }
              ]
            },
            "innerExceptions": [
              {
                "kind": "COMException",
                "message": "Exception from HRESULT: 0x806D0005",
                "stack": {
                  "frames": [
                    {
                      "fullyQualifiedLogicalName": "Dia2Lib.IDiaDataSource.loadDataForExe(String executable, String searchPath, Object pCallback)"
                    },
                    {
                      "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                      "line": 104,
                      "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                    }
                  ]
                },
                "innerExceptions": []
              }
            ]
          }
        },
        {
          "id": "ExceptionLoadingPdb",
          "ruleId": "BA2013",
          "analysisTarget": {
            "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll"
          },
          "message": "'Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\MixedMode_x86_VS2013_MissingPdb.dll' was not evaluated for check 'InitializeStackProtection' because its PDB could not be loaded.\nE_PDB_NOT_FOUND (File not found)",
          "level": "error",
          "exception": {
            "kind": "PdbParseException",
            "message": "E_PDB_NOT_FOUND (File not found)",
            "stack": {
              "frames": [
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 111,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                  "line": 43,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb..ctor(String peOrPdbPath, String symbolPath)"
                },
                {
                  "uri": "file:///Z:/src/BinSkim.Sdk/BinaryAnalyzerContext.cs",
                  "line": 89,
                  "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.IL.Sdk.BinaryAnalyzerContext.get_Pdb()"
                }
              ]
            },
            "innerExceptions": [
              {
                "kind": "COMException",
                "message": "Exception from HRESULT: 0x806D0005",
                "stack": {
                  "frames": [
                    {
                      "fullyQualifiedLogicalName": "Dia2Lib.IDiaDataSource.loadDataForExe(String executable, String searchPath, Object pCallback)"
                    },
                    {
                      "uri": "file:///Z:/src/BinaryParsers/ProgramDatabase/Pdb.cs",
                      "line": 104,
                      "fullyQualifiedLogicalName": "Microsoft.CodeAnalysis.BinaryParsers.ProgramDatabase.Pdb.Init(String peOrPdbPath, String symbolPath)"
                    }
                  ]
                },
                "innerExceptions": []
              }
            ]
          }
        }
      ],
      "rules": {
        "MSG1001": {
          "id": "MSG1001",
          "name": "AnalyzingTarget",
          "fullDescription": "An analysis target was analyzed.",
          "messageFormats": {
            "AnalyzingTarget": "Analyzing '{0}'..."
          }
        },
        "MSG1002": {
          "id": "MSG1002",
          "name": "InvalidTarget",
          "fullDescription": "A file was skipped as it does not appear to be a valid target for analysis.",
          "messageFormats": {
            "InvalidFileType": "'{0}' was not analyzed as it does not appear to be a valid file type for analysis.",
            "InvalidMetadata": "'{0}' was not evaluated for check '{1}:{2}' as the analysis is not relevant based on observed metadata: {3}."
          }
        },
        "BA2010": {
          "id": "BA2010",
          "name": "DoNotMarkImportsSectionAsExecutable",
          "shortDescription": "PE sections should not be marked as both writable and executable.",
          "fullDescription": "PE sections should not be marked as both writable and executable. This condition makes it easier for an attacker to exploit memory corruption vulnerabilities, as it may provide an attacker executable location(s) to inject shellcode. Because the loader will always mark the imports section as writable, it is therefore important to mark this section as non-executable. To resolve this issue, ensure that your program does not mark the imports section executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section.",
          "messageFormats": {
            "Pass": "'{0}' does not have an imports section that is marked as executable, helping to prevent the exploitation of code vulnerabilities.",
            "Error": "'{0}' has the imports section marked executable. Because the loader will always mark the imports section as writable, it is important to mark this section as non-executable, so that an attacker cannot place shellcode here. To resolve this issue, ensure that your program does not mark the imports section as executable. Look for uses of /SECTION or /MERGE on the linker command line, or #pragma segment in source code, which change the imports section to be executable, or which merge the \".rdata\" segment into an executable section."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2021": {
          "id": "BA2021",
          "name": "DoNotMarkWritableSectionsAsExecutable",
          "shortDescription": "Code or data sections should not be marked as both shared and writable.",
          "fullDescription": "Code or data sections should not be marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to alter memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you must share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "messageFormats": {
            "Pass": "'{0}' contains no data or code sections marked as both shared and executable, helping to prevent the exploitation of code vulnerabilities.",
            "Error": "'{0}' contains PE section(s) ({1}) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your tools to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
            "Error_UnexpectedSectionAligment": "'{0}' has a section alignment ({1}) that is smaller than page size ({2})."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2019": {
          "id": "BA2019",
          "name": "DoNotMarkWritableSectionsAsShared",
          "shortDescription": "Code or data sections should not be marked as both shared and writable.",
          "fullDescription": "Code or data sections should not be marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to alter memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you must share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "messageFormats": {
            "Pass": "'{0}' contains no data or code sections marked as both shared and writable, helping to prevent the exploitation of code vulnerabilities.",
            "Error": "'{0}' contains one or more code or data sections ({1}) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to alter memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you must share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.)."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2012": {
          "id": "BA2012",
          "name": "DoNotModifyStackProtectionCookie",
          "shortDescription": "Application code should not interfere with the stack protector.",
          "fullDescription": "Application code should not interfere with the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector relies on a random number, called the \"security cookie\", to detect these buffer overflows. This 'cookie' is statically linked with your binary from a Visual C++ library in the form of the symbol __security_cookie. On recent Windows versions, the loader looks for the statically linked value of this cookie, and initializes the cookie with a far better source of entropy -- the system's secure random number generator -- rather than the limited random number generator available early in the C runtime startup code. When this symbol is not the default value, the additional entropy is not injected by the operating system, reducing the effectiveness of the stack protector. To resolve this issue, ensure that your code does not reference or create a symbol named __security_cookie or __security_cookie_complement.",
          "messageFormats": {
            "Pass": "'{0}' is a C or C++ binary built with the buffer security feature that properly preserves the stack protecter cookie. This has the effect of enabling a significant increase in entropy provided by the operating system over that produced by the C runtime start-up code.",
            "Pass_NoLoadConfig": "'{0}' is  C or C++binary that does not contain a load config table, which indicates either that it was compiled and linked with a version of the compiler that precedes stack protection features or is a binary (such as an ngen'ed assembly) that is not subject to relevant security issues.",
            "Error": "'{0}' is a C or C++ binary that interferes with the stack protector. The stack protector (/GS) is a security feature of the compiler which makes it more difficult to exploit stack buffer overflow memory corruption vulnerabilities. The stack protector relies on a random number, called the \"security cookie\", to detect these buffer overflows. This 'cookie' is statically linked with your binary from a Visual C++ library in the form of the symbol __security_cookie. On recent Windows versions, the loader looks for the magic statically linked value of this cookie, and initializes the cookie with a far better source of entropy -- the system's secure random number generator -- rather than the limited random number generator available early in the C runtime startup code. When this symbol is not the default value, the additional entropy is not injected by the operating system, reducing the effectiveness of the stack protector. To resolve this issue, ensure that your code does not reference or create a symbol named __security_cookie or __security_cookie_complement. NOTE: the modified cookie value detected was: {1}",
            "Error_CouldNotLocateCookie": "'{0}' is a C or C++binary that enables the stack protection feature but the security cookie could not be located. The binary may be corrupted.",
            "Warning_InvalidSecurityCookieOffset": "'{0}' appears to be a packed C or C++ binary that reports a security cookie offset that exceeds the size of the packed file. Use of the stack protector (/GS) feature therefore could not be verified. The file was possibly packed by: {1}."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2005": {
          "id": "BA2005",
          "name": "DoNotShipVulnerableBinaries",
          "shortDescription": "Do not ship obsolete libraries for which there are known security vulnerabilities.",
          "fullDescription": "Do not ship obsolete libraries for which there are known security vulnerabilities.",
          "messageFormats": {
            "Pass": "'{0}' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
            "Error": "'{0}' appears to be an obsolete library (version {1}) for which there are known security vulnerabilities. To resolve this issue, obtain a version of {0} that is newer than version {2}. If this binary is not in fact {0}, ignore this warning.",
            "Error_CouldNotParseVersion": "Version information for '{0}' could not be parsed. The binary therefore could not be verified not to be an obsolete binary that is known to be vulnerable to one or more security problems."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2009": {
          "id": "BA2009",
          "name": "EnableAddressSpaceLayoutRandomization",
          "shortDescription": "Binaries should linked as DYNAMICBASE to be eligible for relocation by Address Space Layout Randomization (ASLR).",
          "fullDescription": "Binaries should linked as DYNAMICBASE to be eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. Configure your tools to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "messageFormats": {
            "Pass": "'{0}' is properly compiled to enable Address Space Layout Randomization, reducing an attacker's ability to exploit code in well-known locations.",
            "Error_NotDynamicBase": "'{0}' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tools to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
            "Error_RelocsStripped": "'{0}' is marked as DYNAMICBASE but relocation data has been stripped from the image, preventing address space layout randomization. ",
            "Error_WinCENoRelocationSection": "'{0}' is a Windows CE image but does not contain any relocation data, preventing Address Space Layout Randomization."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2018": {
          "id": "BA2018",
          "name": "EnableSafeSEH",
          "shortDescription": "X86 binaries should enable the SafeSEH mitigation to minimize exploitable memory corruption issues.",
          "fullDescription": "X86 binaries should enable the SafeSEH mitigation to minimize exploitable memory corruption issues. SafeSEH makes it more difficult to exploit vulnerabilities that permit overwriting SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "messageFormats": {
            "Pass": "'{0}' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
            "Pass_NoSEH": "'{0}' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
            "Error": "'{0}' is an x86 binary which {1}, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2016": {
          "id": "BA2016",
          "name": "MarkImageAsNXCompatible",
          "shortDescription": "Binaries should be marked as NX compatible to help prevent execution of untrusted data as code.",
          "fullDescription": "Binaries should be marked as NX compatible to help prevent execution of untrusted data as code. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), triggers a processor security feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit (because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment). Ensure that your tools are configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "messageFormats": {
            "Pass": "'{0}' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
            "Error": "'{0}' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tools are configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        }
      },
      "files": {
        "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/MixedMode_x86_VS2013_MissingPdb.dll": [
          {
            "hashes": [
              {
                "value": "C7A0E787617FE310627F4513929AC423",
                "algorithm": "md5"
              },
              {
                "value": "D21FD86E158BCC7B2CF6D4D08E77577A9F9339C2",
                "algorithm": "sha1"
              },
              {
                "value": "A83A7F944F077F640C6C0F30B06EE8D3BDBFF2E665B8E94BB66998F1B09BA615",
                "algorithm": "sha256"
              }
            ]
          }
        ]
      },
      "invocation": {
        "commandLine": "\"Z:\\bld\\bin\\BinSkim.Driver\\x86_Release\\BinSkim.exe\" analyze Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\MixedMode_x86_VS2013_MissingPdb.dll --output Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\Expected\\MixedMode_x86_VS2013_MissingPdb.dll.sarif.temp --verbose --hashes --config default",
        "startTime": "2016-05-04T21:57:57.71Z",
        "endTime": "2016-05-04T21:57:58.35Z",
        "processId": 42844,
        "fileName": "Z:\\bld\\bin\\BinSkim.Driver\\x86_Release\\BinSkim.exe",
        "workingDirectory": "Z:\\src\\BinSkim.Driver.FunctionalTests"
      }
    }
  ]
}