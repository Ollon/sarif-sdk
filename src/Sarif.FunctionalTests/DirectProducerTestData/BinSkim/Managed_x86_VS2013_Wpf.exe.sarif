{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0-beta.4",
  "runs": [
    {
      "tool": {
        "name": "BinSkim",
        "fullName": "BinSkim 1.3.2.0-beta",
        "version": "1.3.2.0",
        "semanticVersion": "1.3.2",
        "language": "en-US",
        "properties": {
          "Comments": "A security and correctness analyzer for portable executable and MSIL formats.",
          "CompanyName": "Microsoft",
          "ProductName": "BinSkim Portable Executable Analyzer",
          "SarifLoggerVersion": "1.5.20.0"
        }
      },
      "results": [
        {
          "ruleId": "MSG1001",
          "level": "note",
          "formattedRuleMessage": {
            "formatId": "AnalyzingTarget",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2006",
              "BuildWithSecureTools",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2014",
              "DoNotDisableStackProtectionForFunctions",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2002",
              "DoNotIncorporateVulnerableDependencies",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2010",
              "DoNotMarkImportsSectionAsExecutable",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2012",
              "DoNotModifyStackProtectionCookie",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2008",
              "EnableControlFlowGuard",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2007",
              "EnableCriticalCompilerWarnings",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2011",
              "EnableStackProtection",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2015",
              "EnableHighEntropyVirtualAddresses",
              "image is not a 64-bit binary"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2013",
              "InitializeStackProtection",
              "image is an IL-only managed assembly"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2001",
              "LoadImageAboveFourGigabyteAddress",
              "image is not a 64-bit binary"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "BA2021",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "BA2019",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "BA2005",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "MSG1002",
          "level": "notApplicable",
          "formattedRuleMessage": {
            "formatId": "InvalidMetadata",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe",
              "BA2022",
              "SignSecurely",
              "image is not signed "
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "BA2009",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "BA2018",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass_NoSEH",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        },
        {
          "ruleId": "BA2016",
          "level": "pass",
          "formattedRuleMessage": {
            "formatId": "Pass",
            "arguments": [
              "Managed_x86_VS2013_Wpf.exe"
            ]
          },
          "locations": [
            {
              "analysisTarget": {
                "uri": "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe"
              }
            }
          ]
        }
      ],
      "rules": {
        "MSG1001": {
          "id": "MSG1001",
          "name": "AnalyzingTarget",
          "fullDescription": "An analysis target was analyzed.",
          "messageFormats": {
            "AnalyzingTarget": "Analyzing '{0}'..."
          }
        },
        "MSG1002": {
          "id": "MSG1002",
          "name": "InvalidTarget",
          "fullDescription": "A file was skipped as it does not appear to be a valid target for analysis.",
          "messageFormats": {
            "InvalidFileType": "'{0}' was not analyzed as it does not appear to be a valid file type for analysis.",
            "InvalidMetadata": "'{0}' was not evaluated for check '{1}:{2}' as the analysis is not relevant based on observed metadata: {3}."
          }
        },
        "BA2021": {
          "id": "BA2021",
          "name": "DoNotMarkWritableSectionsAsExecutable",
          "shortDescription": "Code or data sections should not be marked as both shared and writable.",
          "fullDescription": "Code or data sections should not be marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to alter memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you must share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "messageFormats": {
            "Pass": "'{0}' contains no data or code sections marked as both shared and executable, helping to prevent the exploitation of code vulnerabilities.",
            "Error": "'{0}' contains PE section(s) ({1}) that are both writable and executable. Writable and executable memory segments make it easier for an attacker to exploit memory corruption vulnerabilities, because it may provide an attacker executable location(s) to inject shellcode. To resolve this issue, configure your tools to not emit memory sections that are writable and executable. For example, look for uses of /SECTION on the linker command line for C and C++ programs, or #pragma section in C and C++ source code, which mark a section with both attributes.",
            "Error_UnexpectedSectionAligment": "'{0}' has a section alignment ({1}) that is smaller than page size ({2})."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2019": {
          "id": "BA2019",
          "name": "DoNotMarkWritableSectionsAsShared",
          "shortDescription": "Code or data sections should not be marked as both shared and writable.",
          "fullDescription": "Code or data sections should not be marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to alter memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you must share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.).",
          "messageFormats": {
            "Pass": "'{0}' contains no data or code sections marked as both shared and writable, helping to prevent the exploitation of code vulnerabilities.",
            "Error": "'{0}' contains one or more code or data sections ({1}) which are marked as both shared and writable. Because these sections are shared across processes, this condition might permit a process with low privilege to alter memory in a higher privilege process. If you do not actually require that a section be both writable and shared, remove one or both of these attributes (by modifying your .DEF file, the appropriate linker /section switch arguments, etc.). If you must share common data across processes (for inter-process communication (IPC) or other purposes) use CreateFileMapping with proper security attributes or an actual IPC mechanism instead (COM, named pipes, LPC, etc.)."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2005": {
          "id": "BA2005",
          "name": "DoNotShipVulnerableBinaries",
          "shortDescription": "Do not ship obsolete libraries for which there are known security vulnerabilities.",
          "fullDescription": "Do not ship obsolete libraries for which there are known security vulnerabilities.",
          "messageFormats": {
            "Pass": "'{0}' is not known to be an obsolete binary that is vulnerable to one or more security problems.",
            "Error": "'{0}' appears to be an obsolete library (version {1}) for which there are known security vulnerabilities. To resolve this issue, obtain a version of {0} that is newer than version {2}. If this binary is not in fact {0}, ignore this warning.",
            "Error_CouldNotParseVersion": "Version information for '{0}' could not be parsed. The binary therefore could not be verified not to be an obsolete binary that is known to be vulnerable to one or more security problems."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2009": {
          "id": "BA2009",
          "name": "EnableAddressSpaceLayoutRandomization",
          "shortDescription": "Binaries should linked as DYNAMICBASE to be eligible for relocation by Address Space Layout Randomization (ASLR).",
          "fullDescription": "Binaries should linked as DYNAMICBASE to be eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. Configure your tools to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
          "messageFormats": {
            "Pass": "'{0}' is properly compiled to enable Address Space Layout Randomization, reducing an attacker's ability to exploit code in well-known locations.",
            "Error_NotDynamicBase": "'{0}' is not marked as DYNAMICBASE. This means that the binary is not eligible for relocation by Address Space Layout Randomization (ASLR). ASLR is an important mitigation that makes it more difficult for an attacker to exploit memory corruption vulnerabilities. To resolve this issue, configure your tools to build with this feature enabled. For C and C++ binaries, add /DYNAMICBASE to your linker command line. For .NET applications, use a compiler shipping with Visual Studio 2008 or later.",
            "Error_RelocsStripped": "'{0}' is marked as DYNAMICBASE but relocation data has been stripped from the image, preventing address space layout randomization. ",
            "Error_WinCENoRelocationSection": "'{0}' is a Windows CE image but does not contain any relocation data, preventing Address Space Layout Randomization."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2018": {
          "id": "BA2018",
          "name": "EnableSafeSEH",
          "shortDescription": "X86 binaries should enable the SafeSEH mitigation to minimize exploitable memory corruption issues.",
          "fullDescription": "X86 binaries should enable the SafeSEH mitigation to minimize exploitable memory corruption issues. SafeSEH makes it more difficult to exploit vulnerabilities that permit overwriting SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64.",
          "messageFormats": {
            "Pass": "'{0}' is an x86 binary that enables SafeSEH, a mitigation that verifies SEH exception jump targets are defined as exception handlers in the program (and not shellcode).",
            "Pass_NoSEH": "'{0}' is an x86 binary that does not use SEH, making it an invalid target for exploits that attempt to replace SEH jump targets with attacker-controlled shellcode.",
            "Error": "'{0}' is an x86 binary which {1}, indicating that it does not enable the SafeSEH mitigation. SafeSEH makes it more difficult to exploit memory corruption vulnerabilities that can overwrite SEH control blocks on the stack, by verifying that the location to which a thrown SEH exception would jump is indeed defined as an exception handler in the source program (and not shellcode). To resolve this issue, supply the /SafeSEH flag on the linker command line. Note that you will need to configure your build system to supply this flag for x86 builds only, as the /SafeSEH flag is invalid when linking for ARM and x64."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        },
        "BA2016": {
          "id": "BA2016",
          "name": "MarkImageAsNXCompatible",
          "shortDescription": "Binaries should be marked as NX compatible to help prevent execution of untrusted data as code.",
          "fullDescription": "Binaries should be marked as NX compatible to help prevent execution of untrusted data as code. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), triggers a processor security feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit (because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment). Ensure that your tools are configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker.",
          "messageFormats": {
            "Pass": "'{0}' is marked as NX compatible, helping to prevent attackers from executing code that is injected into data segments.",
            "Error": "'{0}' is not marked NX compatible. The NXCompat bit, also known as \"Data Execution Prevention\" (DEP) or \"Execute Disable\" (XD), is a processor feature that allows a program to mark a piece of memory as non-executable. This helps mitigate memory corruption vulnerabilities by preventing an attacker from supplying direct shellcode in their exploit, because the exploit comes in the form of input data to the exploited program on a data segment, rather than on an executable code segment. To resolve this issue, ensure that your tools are configured to mark your binaries as NX compatible, e.g. by passing /NXCOMPAT to the C/C++ linker."
          },
          "defaultLevel": "warning",
          "helpUri": "https://github.com/microsoft/binskim"
        }
      },
      "files": {
        "file:///Z:/src/BinSkim.Driver.FunctionalTests/BaselineTestsData/Managed_x86_VS2013_Wpf.exe": [
          {
            "hashes": [
              {
                "value": "FFE93CE79B502DFCCF86AD65743899F3",
                "algorithm": "md5"
              },
              {
                "value": "D4C851C07A2158DFECF7394E4AEB2FBDBBCF8C30",
                "algorithm": "sha1"
              },
              {
                "value": "CED2CEB83D9978DF2001AF0C7E7F71611C4EB79735B886070005D7791283C9E4",
                "algorithm": "sha256"
              }
            ]
          }
        ]
      },
      "invocation": {
        "commandLine": "\"Z:\\bld\\bin\\BinSkim.Driver\\x86_Release\\BinSkim.exe\" analyze Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\Managed_x86_VS2013_Wpf.exe --output Z:\\src\\BinSkim.Driver.FunctionalTests\\BaselineTestsData\\Expected\\Managed_x86_VS2013_Wpf.exe.sarif.temp --verbose --hashes --config default",
        "startTime": "2016-05-04T21:58:01.73Z",
        "endTime": "2016-05-04T21:58:02.28Z",
        "processId": 33784,
        "fileName": "Z:\\bld\\bin\\BinSkim.Driver\\x86_Release\\BinSkim.exe",
        "workingDirectory": "Z:\\src\\BinSkim.Driver.FunctionalTests"
      }
    }
  ]
}